trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

# below is a schedule based trigger 

schedules:
  - cron: '51 10 * * *'
    displayName: 'Deploy every day at 3AM'
    branches:
      include:
        - release 
        - main 
    always: false

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '5.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy the DEV environment'
  dependsOn: Build

  # below is a condition to start this only if build was succesful
  # and if the Branch name is "release"

  condition: |
   and 
   (
     succeeded(),
     eq(variables['Build.SourceBranchname'], variables['releaseBranchName'])
   )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'ARM-MK101-Management'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: DEV
  condition: eq(variables['Build.Reason'], 'Schedule')
  jobs: 
  - deployment: Deploy
    pool: 
      vmImage: 'ubuntu-20.04'
    environment: test
    variables:
    - group: 'Release'
    strategy: 
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'azure App Service Deploy: website to Test'
            inputs: 
              azureSubscription: 'ARM-MK101-Management'
              appName: '$(WebAppNameTest)'
              package: '$(Pipeline.Workspace)'


# deploy to stage environment if approved and if no Azure monitor alerts are detected
- stage: 'Staging'
  displayName: 'Deploy to the Staging environment'
  dependsOn: Test
  jobs: 
  - deployment:  Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: staging
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website Stage'
              inputs:
                azureSubscription: 'Resource Manager - Tailspin - Space Game'
                appName: '$(WebAppNameStaging)'
                package: '$(Piepline.Workspace)/drop/$(buildConfiguration)/*.zip'
